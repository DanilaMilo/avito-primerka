// –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –ê–≤–∏—Ç–æ

console.log('üîç –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤ –∫–∞–∫ –æ–¥–µ–∂–¥—ã
function testHeadwearDetection() {
  console.log('üß¢ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤ –∫–∞–∫ –æ–¥–µ–∂–¥—ã...');
  
  const testCases = [
    { title: '–®–∞–ø–∫–∞ –∑–∏–º–Ω—è—è', expected: 'clothing' },
    { title: '–ö–µ–ø–∫–∞ –±–µ–π—Å–±–æ–ª–∫–∞', expected: 'clothing' },
    { title: '–®–ª—è–ø–∞ —Å–æ–ª–æ–º–µ–Ω–Ω–∞—è', expected: 'clothing' },
    { title: '–ë–µ—Ä–µ—Ç –≤—è–∑–∞–Ω—ã–π', expected: 'clothing' },
    { title: '–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã', expected: 'clothing' },
    { title: '–®–∞–ø–∫–∞-—É—à–∞–Ω–∫–∞', expected: 'clothing' },
    { title: '–ö–µ–ø–∫–∞ —Å –∫–æ–∑—ã—Ä—å–∫–æ–º', expected: 'clothing' }
  ];
  
  let passedTests = 0;
  
  testCases.forEach((testCase, index) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é detectCategory
    const text = testCase.title.toLowerCase();
    let detectedCategory = 'other';
    
    if (text.includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || text.includes('–¥–∂–∏–Ω—Å—ã') || text.includes('–ø–ª–∞—Ç—å–µ') || 
        text.includes('–∫—É—Ä—Ç–∫–∞') || text.includes('–æ–±—É–≤—å') || text.includes('–æ–¥–µ–∂–¥–∞') || 
        text.includes('–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã') || text.includes('—à–∞–ø–∫–∞') || text.includes('–∫–µ–ø–∫–∞') || 
        text.includes('—à–ª—è–ø–∞') || text.includes('–±–µ—Ä–µ—Ç')) {
      detectedCategory = 'clothing';
    }
    
    const isCorrect = detectedCategory === testCase.expected;
    console.log(`${index + 1}. "${testCase.title}" -> ${detectedCategory} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expected}) ${isCorrect ? '‚úÖ' : '‚ùå'}`);
    
    if (isCorrect) passedTests++;
  });
  
  console.log(`\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${testCases.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  return passedTests === testCases.length;
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function testOtherCategories() {
  console.log('üì± –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  
  const testCases = [
    { title: 'iPhone 15', expected: 'electronics' },
    { title: '–î–∏–≤–∞–Ω —É–≥–ª–æ–≤–æ–π', expected: 'furniture' },
    { title: '–í–µ–ª–æ—Å–∏–ø–µ–¥ –≥–æ—Ä–Ω—ã–π', expected: 'sports' },
    { title: '–î–∏—Å–∫–∏ –ª–∏—Ç—ã–µ', expected: 'auto' },
    { title: '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ Samsung', expected: 'home_appliances' },
    { title: '–£—á–µ–±–Ω–∏–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏', expected: 'books' }
  ];
  
  let passedTests = 0;
  
  testCases.forEach((testCase, index) => {
    const text = testCase.title.toLowerCase();
    let detectedCategory = 'other';
    
    // –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
    if (text.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || text.includes('–Ω–æ—É—Ç–±—É–∫') || text.includes('–ø–ª–∞–Ω—à–µ—Ç') || 
        text.includes('–Ω–∞—É—à–Ω–∏–∫–∏') || text.includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')) {
      detectedCategory = 'electronics';
    }
    // –ú–µ–±–µ–ª—å
    else if (text.includes('—Å—Ç–æ–ª') || text.includes('—Å—Ç—É–ª') || text.includes('–¥–∏–≤–∞–Ω') || 
             text.includes('–∫—Ä–æ–≤–∞—Ç—å') || text.includes('—à–∫–∞—Ñ') || text.includes('–º–µ–±–µ–ª—å')) {
      detectedCategory = 'furniture';
    }
    // –°–ø–æ—Ä—Ç
    else if (text.includes('—Å–ø–æ—Ä—Ç') || text.includes('—Ç—Ä–µ–Ω–∞–∂–µ—Ä') || text.includes('–≤–µ–ª–æ—Å–∏–ø–µ–¥') || 
             text.includes('–ª—ã–∂–∏')) {
      detectedCategory = 'sports';
    }
    // –ê–≤—Ç–æ
    else if (text.includes('–¥–∏—Å–∫') || text.includes('–∫–æ–ª–µ—Å') || text.includes('—à–∏–Ω–∞') || 
             text.includes('—Ä–µ–∑–∏–Ω–∞') || text.includes('–∞–≤—Ç–æ')) {
      detectedCategory = 'auto';
    }
    // –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
    else if (text.includes('—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫') || text.includes('—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è') || 
             text.includes('–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞') || text.includes('–ø—ã–ª–µ—Å–æ—Å') || 
             text.includes('–±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞')) {
      detectedCategory = 'home_appliances';
    }
    // –ö–Ω–∏–≥–∏
    else if (text.includes('–∫–Ω–∏–≥–∞') || text.includes('–∂—É—Ä–Ω–∞–ª') || text.includes('—É—á–µ–±–Ω–∏–∫')) {
      detectedCategory = 'books';
    }
    
    const isCorrect = detectedCategory === testCase.expected;
    console.log(`${index + 1}. "${testCase.title}" -> ${detectedCategory} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expected}) ${isCorrect ? '‚úÖ' : '‚ùå'}`);
    
    if (isCorrect) passedTests++;
  });
  
  console.log(`\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${testCases.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  return passedTests === testCases.length;
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function testRealPageCategory() {
  console.log('üåê –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –ê–≤–∏—Ç–æ
  const isAvitoPage = window.location.href.includes('avito.ru');
  if (!isAvitoPage) {
    console.log('‚ùå –ù–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ê–≤–∏—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
    return false;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
  const titleElement = document.querySelector('[data-marker="item-view/title"]');
  const descriptionElement = document.querySelector('[data-marker="item-view/description"]');
  
  if (!titleElement) {
    console.log('‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  const title = titleElement.textContent || '';
  const description = descriptionElement ? descriptionElement.textContent : '';
  
  console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log('- –ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);
  console.log('- –û–ø–∏—Å–∞–Ω–∏–µ:', description.substring(0, 100) + '...');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const text = (title + ' ' + description).toLowerCase();
  let detectedCategory = 'other';
  
  if (text.includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || text.includes('–¥–∂–∏–Ω—Å—ã') || text.includes('–ø–ª–∞—Ç—å–µ') || 
      text.includes('–∫—É—Ä—Ç–∫–∞') || text.includes('–æ–±—É–≤—å') || text.includes('–æ–¥–µ–∂–¥–∞') || 
      text.includes('–≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã') || text.includes('—à–∞–ø–∫–∞') || text.includes('–∫–µ–ø–∫–∞') || 
      text.includes('—à–ª—è–ø–∞') || text.includes('–±–µ—Ä–µ—Ç')) {
    detectedCategory = 'clothing';
  } else if (text.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || text.includes('–Ω–æ—É—Ç–±—É–∫') || text.includes('–ø–ª–∞–Ω—à–µ—Ç') || 
             text.includes('–Ω–∞—É—à–Ω–∏–∫–∏') || text.includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')) {
    detectedCategory = 'electronics';
  } else if (text.includes('—Å—Ç–æ–ª') || text.includes('—Å—Ç—É–ª') || text.includes('–¥–∏–≤–∞–Ω') || 
             text.includes('–∫—Ä–æ–≤–∞—Ç—å') || text.includes('—à–∫–∞—Ñ') || text.includes('–º–µ–±–µ–ª—å')) {
    detectedCategory = 'furniture';
  } else if (text.includes('—Å–ø–æ—Ä—Ç') || text.includes('—Ç—Ä–µ–Ω–∞–∂–µ—Ä') || text.includes('–≤–µ–ª–æ—Å–∏–ø–µ–¥') || 
             text.includes('–ª—ã–∂–∏')) {
    detectedCategory = 'sports';
  } else if (text.includes('–¥–∏—Å–∫') || text.includes('–∫–æ–ª–µ—Å') || text.includes('—à–∏–Ω–∞') || 
             text.includes('—Ä–µ–∑–∏–Ω–∞') || text.includes('–∞–≤—Ç–æ')) {
    detectedCategory = 'auto';
  } else if (text.includes('—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫') || text.includes('—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è') || 
             text.includes('–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞') || text.includes('–ø—ã–ª–µ—Å–æ—Å') || 
             text.includes('–±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞')) {
    detectedCategory = 'home_appliances';
  } else if (text.includes('–∫–Ω–∏–≥–∞') || text.includes('–∂—É—Ä–Ω–∞–ª') || text.includes('—É—á–µ–±–Ω–∏–∫')) {
    detectedCategory = 'books';
  }
  
  console.log(`\n–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${detectedCategory}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤
  if (title.toLowerCase().includes('—à–∞–ø–∫–∞') || title.toLowerCase().includes('–∫–µ–ø–∫–∞') || 
      title.toLowerCase().includes('—à–ª—è–ø–∞') || title.toLowerCase().includes('–±–µ—Ä–µ—Ç')) {
    const isCorrect = detectedCategory === 'clothing';
    console.log(`–ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–¥–µ–∂–¥–∞: ${isCorrect ? '‚úÖ' : '‚ùå'}`);
    return isCorrect;
  }
  
  console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  return true;
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runAllCategoryTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
  
  const headwearTest = testHeadwearDetection();
  const otherCategoriesTest = testOtherCategories();
  const realPageTest = testRealPageCategory();
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
  console.log('- –ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã –∫–∞–∫ –æ–¥–µ–∂–¥–∞:', headwearTest ? '‚úÖ' : '‚ùå');
  console.log('- –î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', otherCategoriesTest ? '‚úÖ' : '‚ùå');
  console.log('- –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', realPageTest ? '‚úÖ' : '‚ùå');
  
  const allPassed = [headwearTest, otherCategoriesTest, realPageTest].every(v => v);
  
  console.log('\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', allPassed ? '‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
  
  return allPassed;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testCategoryDetection = {
  headwear: testHeadwearDetection,
  otherCategories: testOtherCategories,
  realPage: testRealPageCategory,
  runAll: runAllCategoryTests
};

console.log('üîç –§—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:');
console.log('- testCategoryDetection.headwear()');
console.log('- testCategoryDetection.otherCategories()');
console.log('- testCategoryDetection.realPage()');
console.log('- testCategoryDetection.runAll()');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
runAllCategoryTests();
